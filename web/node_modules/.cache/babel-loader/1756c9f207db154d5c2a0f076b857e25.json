{"ast":null,"code":"import axios from \"axios\";\nimport swal from \"sweetalert2\";\nimport { io } from 'socket.io-client';\nimport store from \"../../vuex/store\";\nexport default {\n  data() {\n    return {\n      login: false,\n      user: null,\n      query: \"\"\n    };\n  },\n\n  methods: {\n    doSearch: async function () {\n      const formData = new FormData();\n      formData.append(\"query\", this.query);\n      const response = await axios.post(this.$apiURL + \"/search\", formData, {\n        headers: this.$headers\n      });\n\n      if (response.data.status == \"success\") {\n        store.commit(\"setContacts\", response.data.contacts);\n      } else {\n        swal.fire(\"Error\", response.data.message, \"error\");\n      }\n    },\n    doLogout: async function () {\n      const response = await axios.post(this.$apiURL + \"/logout\", null, {\n        headers: this.$headers\n      });\n      localStorage.removeItem(this.$accessTokenKey);\n      this.$router.push({\n        path: \"/login\"\n      });\n    },\n    getUser: async function () {\n      const self = this;\n\n      if (localStorage.getItem(this.$accessTokenKey)) {\n        const response = await axios.post(this.$apiURL + \"/getUser\", null, {\n          headers: this.$headers\n        });\n\n        if (response.data.status == \"success\") {\n          this.$user = response.data.user;\n          store.commit(\"setUser\", response.data.user);\n          store.commit(\"setUnreadNotifications\", response.data.unreadNotifications);\n          store.commit(\"setNotifications\", response.data.user.notifications);\n\n          if (typeof socketIO !== \"undefined\") {\n            socketIO.emit(\"connected\", this.$user.email);\n            socketIO.on(\"sendMessage\", async function (data) {\n              if (self.$route.path == \"/chat/\" + data.data.sender.email) {\n                store.commit(\"appendMessage\", data.data);\n              }\n\n              let tempContacts = self.$user.contacts;\n\n              for (let a = 0; a < tempContacts.length; a++) {\n                if (tempContacts[a]._id == data.data.sender._id) {\n                  tempContacts[a].unreadMessages++;\n                }\n              }\n\n              store.commit(\"setContacts\", tempContacts);\n              const Toast = swal.mixin({\n                toast: true,\n                position: 'bottom-right',\n                customClass: {\n                  popup: 'colored-toast'\n                },\n                showConfirmButton: false,\n                timer: 10000,\n                timerProgressBar: true\n              });\n              await Toast.fire({\n                title: data.title\n              });\n            });\n          }\n        } else {\n          localStorage.removeItem(this.$accessTokenKey);\n        }\n\n        this.login = localStorage.getItem(this.$accessTokenKey) != null;\n      } else {\n        this.login = false;\n      }\n\n      global.user = this.user;\n    }\n  },\n  computed: {\n    user() {\n      return store.getters.getUser;\n    }\n\n  },\n  mounted: function () {\n    this.getUser();\n    global.socketIO = io(this.$apiURL);\n  }\n};","map":{"version":3,"mappings":"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","names":["axios","swal","io","store","data","login","user","query","methods","doSearch","formData","FormData","append","response","post","$apiURL","headers","$headers","status","commit","contacts","fire","message","doLogout","localStorage","removeItem","$accessTokenKey","$router","push","path","getUser","self","getItem","$user","unreadNotifications","notifications","socketIO","emit","email","on","$route","sender","tempContacts","a","length","_id","unreadMessages","Toast","mixin","toast","position","customClass","popup","showConfirmButton","timer","timerProgressBar","title","global","computed","getters","mounted"],"sourceRoot":"","sources":["D:\\Download\\Compressed\\chat\\web\\src\\components\\layouts\\AppHeader.vue"],"sourcesContent":["<template>\n    <nav class=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n        <div class=\"container-fluid\">\n        \n            <router-link class=\"navbar-brand\" to=\"/\">\n                Chat\n            </router-link>\n            \n            <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarColor01\" aria-controls=\"navbarColor01\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span class=\"navbar-toggler-icon\"></span>\n            </button>\n\n            <div class=\"collapse navbar-collapse\" id=\"navbarColor01\">\n                <ul class=\"navbar-nav me-auto\">\n                    <li class=\"nav-item\">\n                        <router-link class=\"nav-link active\" to=\"/\">\n                            Home\n                        </router-link>\n                    </li>\n\n                    <li class=\"nav-item\" v-if=\"!login\">\n                        <router-link class=\"nav-link\" to=\"/login\">Login</router-link>\n                    </li>\n\n                    <li class=\"nav-item\" v-if=\"!login\">\n                        <router-link class=\"nav-link\" to=\"/register\">Register</router-link>\n                    </li>\n\n                    <li class=\"nav-item dropdown\" v-if=\"login\">\n                        <a v-text=\"user.name\" class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"></a>\n                        <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                            <li><router-link to=\"/profile\" class=\"dropdown-item\" >Profile</router-link></li>\n\n                            <li><a class=\"dropdown-item\" v-on:click=\"doLogout\" href=\"javascript:void(0);\">Logout</a></li>\n                        </div>\n                    </li>\n\n                    <li class=\"nav-item\" v-if=\"login\">\n                        \n                    </li>\n                </ul>\n\n                <form class=\"d-flex\" v-on:submit.prevent=\"doSearch\" v-if=\"false\">\n                    <input class=\"form-control me-sm-2\" type=\"text\" v-model=\"query\" placeholder=\"Search\">\n                    <button class=\"btn btn-secondary my-2 my-sm-0\" type=\"submit\">Search</button>\n                </form>\n            </div>\n        </div>\n    </nav>\n</template>\n\n<script>\n\n    import axios from \"axios\"\n    import swal from \"sweetalert2\"\n    import { io } from 'socket.io-client'\n    import store from \"../../vuex/store\"\n\n    export default {\n        data() {\n            return {\n                login: false,\n                user: null,\n\n                query: \"\"\n            }\n        },\n        methods: {\n            doSearch: async function () {\n                const formData = new FormData()\n                formData.append(\"query\", this.query)\n\n                const response = await axios.post(\n                    this.$apiURL + \"/search\",\n                    formData,\n                    {\n                        headers: this.$headers\n                    }\n                )\n                if (response.data.status == \"success\") {\n                    store.commit(\"setContacts\", response.data.contacts)\n                } else {\n                    swal.fire(\"Error\", response.data.message, \"error\")\n                }\n            },\n\n            doLogout: async function () {\n                const response = await axios.post(\n                    this.$apiURL + \"/logout\",\n                    null,\n                    {\n                        headers: this.$headers\n                    }\n                );\n\n                localStorage.removeItem(this.$accessTokenKey)\n\n                this.$router.push({\n                    path: \"/login\"\n                })\n            },\n\n            getUser: async function () {\n                const self = this\n\n                if (localStorage.getItem(this.$accessTokenKey)) {\n                    const response = await axios.post(\n                        this.$apiURL + \"/getUser\",\n                        null,\n                        {\n                            headers: this.$headers\n                        }\n                    )\n\n                    if (response.data.status == \"success\") {\n                        this.$user = response.data.user\n\n                        store.commit(\"setUser\", response.data.user)\n                        store.commit(\"setUnreadNotifications\", response.data.unreadNotifications)\n                        store.commit(\"setNotifications\", response.data.user.notifications)\n\n                        if (typeof socketIO !== \"undefined\") {\n                            socketIO.emit(\"connected\", this.$user.email)\n\n                            socketIO.on(\"sendMessage\", async function (data) {\n                                if (self.$route.path == \"/chat/\" + data.data.sender.email) {\n                                    store.commit(\"appendMessage\", data.data)\n                                }\n\n                                let tempContacts = self.$user.contacts\n                                for (let a = 0; a < tempContacts.length; a++) {\n                                    if (tempContacts[a]._id == data.data.sender._id) {\n                                        tempContacts[a].unreadMessages++\n                                    }\n                                }\n                                store.commit(\"setContacts\", tempContacts)\n\n                                const Toast = swal.mixin({\n                                    toast: true,\n                                    position: 'bottom-right',\n                                    customClass: {\n                                        popup: 'colored-toast'\n                                    },\n                                    showConfirmButton: false,\n                                        timer: 10000,\n                                        timerProgressBar: true\n                                    })\n                                \n                                await Toast.fire({\n                                    title: data.title\n                                })\n                            })\n                        }\n                    } else {\n                        localStorage.removeItem(this.$accessTokenKey);\n                    }\n\n                    this.login = (localStorage.getItem(this.$accessTokenKey) != null);\n                } else {\n                    this.login = false;\n                }\n\n                global.user = this.user\n            },\n        },\n\n        computed: {\n            user() {\n                return store.getters.getUser\n            }\n        },\n\n        mounted: function () {\n            this.getUser();\n\n            global.socketIO = io(this.$apiURL)\n        }\n    }\n</script>"]},"metadata":{},"sourceType":"module"}