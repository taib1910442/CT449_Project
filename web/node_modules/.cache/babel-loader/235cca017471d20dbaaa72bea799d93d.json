{"ast":null,"code":"import axios from \"axios\";\nimport swal from \"sweetalert2\";\nimport store from \"../vuex/store\";\nexport default {\n  date() {\n    return {\n      isDeleting: false\n    };\n  },\n\n  methods: {\n    // method to mark all notifications as read\n    markAsRead: async function () {\n      const response = await axios.post(this.$apiURL + \"/markNotificationsAsRead\", null, {\n        headers: this.$headers\n      });\n\n      if (response.data.status == \"success\") {\n        // update in local array\n        const tempNotifications = store.getters.getNotifications;\n\n        for (let a = 0; a < tempNotifications.length; a++) {\n          tempNotifications[a].isRead = true;\n        }\n\n        store.commit(\"setNotifications\", tempNotifications); // set the unread notifications to zero\n\n        store.commit(\"setUnreadNotifications\", 0);\n      }\n    },\n    // method to delete the notification\n    deleteNotification: async function () {\n      const form = event.target;\n      const _id = form._id.value;\n      const formData = new FormData(form);\n      this.isDeleting = true;\n      const response = await axios.post(this.$apiURL + \"/deleteNotification\", formData, {\n        headers: this.$headers\n      });\n      this.isDeleting = false;\n\n      if (response.data.status == \"success\") {\n        // remove from local array\n        const tempNotifications = store.getters.getNotifications;\n\n        for (let a = 0; a < tempNotifications.length; a++) {\n          if (tempNotifications[a]._id == _id) {\n            tempNotifications.splice(a, 1);\n            break;\n          }\n        }\n\n        store.commit(\"setNotifications\", tempNotifications);\n      } else {\n        swal.fire(\"Error\", response.data.message, \"error\");\n      }\n    }\n  },\n  // on page loaded, mark all notifications as read\n  mounted: function () {\n    this.markAsRead();\n  },\n  // create computed property for all notifications\n  computed: {\n    notifications() {\n      return store.getters.getNotifications.reverse();\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAiDC,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AAEA,eAAe;AAEdC,MAAI,GAAG;AACN,WAAO;AACNC,gBAAU,EAAE;AADN,KAAP;AAGA,GANa;;AAQdC,SAAO,EAAE;AACR;AACAC,cAAU,EAAE,kBAAkB;AAC7B,YAAMC,QAAO,GAAI,MAAMP,KAAK,CAACQ,IAAN,CACtB,KAAKC,OAAL,GAAe,0BADO,EAEtB,IAFsB,EAGtB;AACCC,eAAO,EAAE,KAAKC;AADf,OAHsB,CAAvB;;AAQA,UAAIJ,QAAQ,CAACK,IAAT,CAAcC,MAAd,IAAwB,SAA5B,EAAuC;AACtC;AACA,cAAMC,iBAAgB,GAAIZ,KAAK,CAACa,OAAN,CAAcC,gBAAxC;;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,iBAAiB,CAACI,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;AAClDH,2BAAiB,CAACG,CAAD,CAAjB,CAAqBE,MAArB,GAA8B,IAA9B;AACD;;AACAjB,aAAK,CAACkB,MAAN,CAAa,kBAAb,EAAiCN,iBAAjC,EANsC,CAQtC;;AACAZ,aAAK,CAACkB,MAAN,CAAa,wBAAb,EAAuC,CAAvC;AACD;AACA,KAtBO;AAwBR;AACAC,sBAAkB,EAAE,kBAAkB;AACrC,YAAMC,IAAG,GAAIC,KAAK,CAACC,MAAnB;AACA,YAAMC,GAAE,GAAIH,IAAI,CAACG,GAAL,CAASC,KAArB;AACA,YAAMC,QAAO,GAAI,IAAIC,QAAJ,CAAaN,IAAb,CAAjB;AAEA,WAAKlB,UAAL,GAAkB,IAAlB;AAEA,YAAMG,QAAO,GAAI,MAAMP,KAAK,CAACQ,IAAN,CACtB,KAAKC,OAAL,GAAe,qBADO,EAEtBkB,QAFsB,EAGtB;AACCjB,eAAO,EAAE,KAAKC;AADf,OAHsB,CAAvB;AAOA,WAAKP,UAAL,GAAkB,KAAlB;;AAEA,UAAIG,QAAQ,CAACK,IAAT,CAAcC,MAAd,IAAwB,SAA5B,EAAuC;AACtC;AACA,cAAMC,iBAAgB,GAAIZ,KAAK,CAACa,OAAN,CAAcC,gBAAxC;;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,iBAAiB,CAACI,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;AAClD,cAAIH,iBAAiB,CAACG,CAAD,CAAjB,CAAqBQ,GAArB,IAA4BA,GAAhC,EAAqC;AACpCX,6BAAiB,CAACe,MAAlB,CAAyBZ,CAAzB,EAA4B,CAA5B;AACA;AACD;AACD;;AACAf,aAAK,CAACkB,MAAN,CAAa,kBAAb,EAAiCN,iBAAjC;AACD,OAVA,MAUO;AACNb,YAAI,CAAC6B,IAAL,CAAU,OAAV,EAAmBvB,QAAQ,CAACK,IAAT,CAAcmB,OAAjC,EAA0C,OAA1C;AACD;AACA;AAtDO,GARK;AAiEd;AACAC,SAAO,EAAE,YAAY;AACpB,SAAK1B,UAAL;AACA,GApEa;AAsEd;AACG2B,UAAQ,EAAE;AACZC,iBAAa,GAAG;AACf,aAAOhC,KAAK,CAACa,OAAN,CAAcC,gBAAd,CAA+BmB,OAA/B,EAAP;AACD;;AAHY;AAvEC,CAAf","names":["axios","swal","store","date","isDeleting","methods","markAsRead","response","post","$apiURL","headers","$headers","data","status","tempNotifications","getters","getNotifications","a","length","isRead","commit","deleteNotification","form","event","target","_id","value","formData","FormData","splice","fire","message","mounted","computed","notifications","reverse"],"sourceRoot":"","sources":["D:\\Download\\Compressed\\chat-station-mevn-free\\web\\src\\components\\NotificationsComponent.vue"],"sourcesContent":["<template>\n\t<div class=\"container\" style=\"margin-top: 50px;\">\n\t\t<!-- heading -->\n\t\t<div class=\"row\">\n\t        <div class=\"col-md-12\">\n\t            <h1 class=\"text-center\">Notifications</h1>\n\t        </div>\n\t    </div>\n\t    \n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<!-- show all notifications -->\n\t\t\t\t<table class=\"table table-hover\">\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>Type</th>\n\t\t\t\t\t\t\t<th>Actions</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr v-for=\"notification in notifications\" v-bind:key=\"notification._id\">\n\t\t\t\t\t\t\t<!-- show type of notification -->\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<span v-text=\"notification.type\"></span>&nbsp;\n\n\t\t\t\t\t\t\t\t<!-- if type is group invite, then we also show the name of group -->\n\t\t\t\t\t\t\t\t<template v-if=\"notification.type == 'group_invite'\">\n\t\t\t\t\t\t\t\t\t<span v-text=\"notification.group.name\"></span>\n\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t</td>\n\n\t\t\t\t\t\t\t<!-- a button to delete the notification -->\n\t\t\t\t\t\t\t<td style=\"display: flex;\">\n\t\t\t\t\t\t\t\t<form v-on:submit.prevent=\"deleteNotification\">\n\t\t\t\t\t\t\t\t\t<input type=\"hidden\" name=\"_id\" v-bind:value=\"notification._id\" required />\n\t\t\t\t\t\t\t\t\t<input type=\"submit\" v-bind:value=\"isDeleting ? 'Deleting...' : 'Delete'\" v-bind:isDeleting=\"disabled\" class=\"btn btn-danger\" />\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\n\n\timport axios from \"axios\"\n\timport swal from \"sweetalert2\"\n\timport store from \"../vuex/store\"\n\n\texport default {\n\n\t\tdate() {\n\t\t\treturn {\n\t\t\t\tisDeleting: false\n\t\t\t}\n\t\t},\n\n\t\tmethods: {\n\t\t\t// method to mark all notifications as read\n\t\t\tmarkAsRead: async function () {\n\t\t\t\tconst response = await axios.post(\n\t\t\t\t\tthis.$apiURL + \"/markNotificationsAsRead\",\n\t\t\t\t\tnull,\n\t\t\t\t\t{\n\t\t\t\t\t\theaders: this.$headers\n\t\t\t\t\t}\n\t\t\t\t)\n\n\t\t\t\tif (response.data.status == \"success\") {\n\t\t\t\t\t// update in local array\n\t\t\t\t\tconst tempNotifications = store.getters.getNotifications\n\t\t\t\t\tfor (let a = 0; a < tempNotifications.length; a++) {\n\t\t\t\t\t\ttempNotifications[a].isRead = true\n\t\t\t\t\t}\n\t\t\t\t\tstore.commit(\"setNotifications\", tempNotifications)\n\n\t\t\t\t\t// set the unread notifications to zero\n\t\t\t\t\tstore.commit(\"setUnreadNotifications\", 0)\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// method to delete the notification\n\t\t\tdeleteNotification: async function () {\n\t\t\t\tconst form = event.target\n\t\t\t\tconst _id = form._id.value\n\t\t\t\tconst formData = new FormData(form)\n\n\t\t\t\tthis.isDeleting = true\n\n\t\t\t\tconst response = await axios.post(\n\t\t\t\t\tthis.$apiURL + \"/deleteNotification\",\n\t\t\t\t\tformData,\n\t\t\t\t\t{\n\t\t\t\t\t\theaders: this.$headers\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\tthis.isDeleting = false\n\n\t\t\t\tif (response.data.status == \"success\") {\n\t\t\t\t\t// remove from local array\n\t\t\t\t\tconst tempNotifications = store.getters.getNotifications\n\t\t\t\t\tfor (let a = 0; a < tempNotifications.length; a++) {\n\t\t\t\t\t\tif (tempNotifications[a]._id == _id) {\n\t\t\t\t\t\t\ttempNotifications.splice(a, 1)\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tstore.commit(\"setNotifications\", tempNotifications)\n\t\t\t\t} else {\n\t\t\t\t\tswal.fire(\"Error\", response.data.message, \"error\");\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\n\t\t// on page loaded, mark all notifications as read\n\t\tmounted: function () {\n\t\t\tthis.markAsRead()\n\t\t},\n\n\t\t// create computed property for all notifications\n\t    computed: {\n\t\t\tnotifications() {\n\t\t\t\treturn store.getters.getNotifications.reverse()\n\t\t\t}\n\t\t}\n\t}\n</script>"]},"metadata":{},"sourceType":"module"}